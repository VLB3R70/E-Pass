"""
.. module:: app
    :synopsis:

This module is the main module for the REST API. It implements all necessary functions to establish the routes of the
app. All the data generated by the user will be stored into the database configured by the :doc:`core` package. If there
is no database, it will be created a new one locally. The :doc:`tui` and :doc:`gui` packages use the same database.

"""
import os

from flask import Flask, render_template, redirect, url_for, flash
from flask_login import (LoginManager, current_user, login_required, login_user, logout_user, )
from flask_sqlalchemy import SQLAlchemy

from CORE import Encryption
from CORE.data import Data as data
from REST.config import Config
from REST.forms import LoginForm, RegisterForm, AddPassForm, DeletePassForm, ModifyPassForm, ShowPasswordForm

app = Flask(__name__)
app.config.from_object(Config)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"
db = SQLAlchemy(app)
encryptor = Encryption


@app.route("/")
def init():
    """

    This function defines a route for the app. When the user is in the ``/`` view it will be redirected to the
    ``/login`` view.

    :return: It returns a redirection to the login view
    """
    if not os.path.exists(data.DATA_DIRECTORY):
        os.mkdir(data.DATA_DIRECTORY)
    elif not os.path.exists(data.DATABASE_PATH):
        open(data.DATABASE_PATH, "w")
        db.create_all()
    return redirect(url_for("login"))


@app.route("/login", methods=["GET", "POST"])
def login():
    """

    This function renders the ``login`` template of the app. In this view a simple login form is displayed; the user has
    to enter his username and master password -both stored in the database- to login. This view also offers a direct
    link to the :py:meth:`.register` function to display a form of registration.

    :return: It returns the rendered template of the login

    """
    form = LoginForm()
    if form.validate_on_submit():
        user = form.user_name.data
        password = form.master_password.data
        if User.query.filter_by(name=user).first():
            db_user = User.query.filter_by(name=user).first()
            if password == encryptor.decrypt(password=db_user.master_password):
                login_user(db_user)
                return redirect(url_for("user", username=db_user.name))
    return render_template("login.html", form=form)


@app.route("/logout")
def logout():
    """

    This function simply logs out the user and redirects it to the :py:meth:`.login` route.

    :return: Redirects the user to the login view

    """
    logout_user()
    return redirect(url_for("login"))


from REST.models import User, Data


@app.route("/registration", methods=["GET", "POST"])
def register():
    """

    This function renders the ``registration`` template of the app. This template displays a simple form of
    registration. This form ask the user for his `username`, `master password` and `email`. When submitted, the function
    adds a new user into the database and redirects the user to the login view. If the user exists it prompts an error
    message.

    :return: It returns the rendered template of the registration

    """
    global user
    form = RegisterForm()
    if form.validate_on_submit():
        user_exists = User.query.filter_by(name=form.user_name.data).first()
        if (user_exists is None and form.master_password.data == form.second_password.data):
            user = User()
            user.name = form.user_name.data
            user.master_password = encryptor.encrypt(form.master_password.data)
            user.email = form.email.data
            db.session.add(user)
            db.session.commit()
            return redirect(url_for("user", username=user.name))
        form.user_name.errors.append("That user exists.")
    return render_template("register.html", form=form)


@app.route("/home/<username>/", methods=["GET", "POST"])
@login_required
def user(username):
    """

    This function renders the ``home`` template. This template displays a table with all the data of the user like in
    the :doc:`tui` and :doc:`gui` packages. It also has the three buttons for adding, modifying and deleting passwords.
    The information of the table depends on the user logged so the `User 1` can't see the information of the `User 2`
    even when they are in the same database and configured by the same person.

    It also renders a simple form to show the password of the database. In this form the user has to enter the ID of the
    password shown in the table, and it will change the ``*`` characters for the value of the password.

    :param username: Is the username of the user logged

    :return: It returns the rendered template of ``home``

    """
    form = ShowPasswordForm()
    if form.validate_on_submit():
        data = Data.query.filter_by(id=form.password_id.data, user_id=current_user.id).first()
        password = Encryption.decrypt(data.password)
        return render_template("home.html", username=username, data=Data.query.filter_by(user_id=current_user.id),
                               id=current_user.id, form=form, text=password)
    return render_template("home.html", username=username, data=Data.query.filter_by(user_id=current_user.id),
                           id=current_user.id, form=form, text='')


@app.route("/home/<username>/add", methods=["GET", "POST"])
@login_required
def add_password(username):
    """

    This function renders the template to add a new password into the database. This view displays a form who ask for
    the data needed to add a new password, to be the `site name`, the `username` and the `password`. When submitted, the
    function will redirect the user to the ``home page`` (:py:meth:`.user`). This function also checks if the user has
    entered the same password twice, if not ot will prompt an error message.

    :param username: Is the username of the user logged. It's only used for the path route

    :return: It returns the rendered template

    """
    form = AddPassForm()
    if form.validate_on_submit():
        if form.password.data == form.confirm_password.data:
            user_data = Data()
            user_data.user_id = current_user.id
            user_data.site_name = form.site_name.data
            user_data.username = form.username.data
            user_data.password = encryptor.encrypt(form.password.data)
            db.session.add(user_data)
            db.session.commit()
            return redirect(url_for("user", username=username))
        else:
            form.confirm_password.errors.append("The passwords are not the same.")
    else:
        return render_template("addPass.html", form=form)


@app.route("/home/<username>/modify", methods=["GET", "POST"])
@login_required
def modify_password(username):
    """

    This function renders the template to modify a password of the database. This view displays the table with all the
    data and a simple form to modify the values. In order to modify a password the user first need to select the ID of
    the password. That ID is displayed in the database. It also checks if all the entries are empty, if they are, it
    prompts an error message. When submitted, the function deletes the password selected and creates a new one with the
    new values.

    :param username: Is the username of the user logged

    :return: It returns the rendered template to modify the passwords

    """
    form = ModifyPassForm()
    num_passwords = Data.query.filter_by(user_id=current_user.id).count()
    if form.validate_on_submit():
        old_data = Data.query.filter_by(id=form.id.data, user_id=current_user.id).first()
        new_data = Data()
        new_data.user_id = current_user.id
        if form.id.data != "":
            if form.new_site_name.data != "":
                new_data.site_name = form.new_site_name.data
            else:
                new_data.site_name = old_data.site_name
            if form.new_username.data != "":
                new_data.username = form.new_username.data
            else:
                new_data.username = old_data.username
            if (form.new_password.data != "" and form.new_password.data == form.confirm_password.data):
                new_data.password = form.new_password.data
            elif form.new_password.data != form.confirm_password.data:
                flash("The passwords must be the same")
            else:
                new_data.password = old_data.password
            db.session.delete(old_data)
            db.session.commit()
            new_data.id = num_passwords + 1
            db.session.add(new_data)
            db.session.commit()
            return redirect(url_for("user", username=username))
    else:
        return render_template("modify.html", form=form, data=Data.query.filter_by(user_id=current_user.id))


@app.route("/home/<username>/delete", methods=["GET", "POST"])
@login_required
def delete_password(username):
    """

    This function returns the rendered template to delete a password. This view displays a table with all the data of
    the user logged and a form to enter the ID of the password wanted to delete. When submitted, the function deletes
    the password of the database and redirects the user to the ``home page``.

    :param username: Is the username of the user logged

    :return: It returns the rendered template to delete passwords

    """
    form = DeletePassForm()
    if form.validate_on_submit():
        data = Data.query.filter_by(id=form.id.data, user_id=current_user.id).first()
        db.session.delete(data)
        db.session.commit()
        return redirect(url_for("user", username=username))
    else:
        return render_template("delete.html", form=form, data=Data.query.filter_by(user_id=current_user.id))


@login_manager.user_loader
def load_user(name):
    """

    This function is needed when user logs in. The ``LoginManager`` object from the ``flask_login`` package is used to
    hold all the settings of a user during its session.

    With this function, the ``LoginManager`` holds the settings of the user queried by the username entered.

    In resume, this function loads the data from the user in the database with the same name as the entered. When the
    user logs out the ``LoginManager`` drops the data to request once again the login.

    :param name: Is the name of the user wanted to load. Is the name entered by the user in the login form

    :return: It returns an instance of the user from the database with the same name

    :rtype: :py:class:`.models.User`

    """
    return User.query.get(name)
